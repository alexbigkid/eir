#!/usr/bin/env python3
"""Build script for creating standalone executables with PyInstaller."""

# Ensure all subprocess.run calls use argument lists, not shell=True or str cmd
import subprocess  # noqa: S404
import os
import platform
import shutil
import sys
from pathlib import Path


def get_platform_name():
    """Get the platform name for binary naming."""
    system = platform.system().lower()
    machine = platform.machine().lower()

    # Normalize machine architecture names for consistency
    machine_map = {
        "amd64": "x86_64",
        "x86_64": "x86_64",
        "arm64": "aarch64",
        "aarch64": "aarch64",
    }
    machine = machine_map.get(machine, machine)

    # Platform-specific naming
    if system == "darwin":
        return "macos-universal"  # macOS builds are universal
    elif system == "linux":
        return f"linux-{machine}"
    elif system == "windows":
        # Windows uses different naming for architectures
        if machine == "aarch64":
            return "windows-arm64"
        else:
            return f"windows-{machine}"
    else:
        return f"{system}-{machine}"


def clean_build_dirs():
    """Clean previous build artifacts."""
    dirs_to_clean = ["build", "dist", "__pycache__"]
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"Cleaning {dir_name}...")
            shutil.rmtree(dir_name)


def download_dnglab_for_linux():
    """Download DNGLab binary for Linux DNG conversion."""
    if platform.system().lower() != "linux":
        print(f"üö´ Skipping DNGLab download - not Linux (current: {platform.system()})")
        return  # Only download on Linux

    print("üì• Downloading DNGLab for Linux DNG conversion...")
    print(f"üîç Current working directory: {Path.cwd()}")

    # Run the download script
    script_path = Path("tools/download_dnglab.sh")
    print(f"üîç Looking for download script: {script_path}")
    if script_path.exists():
        print(f"‚úÖ Found download script: {script_path}")
        print("üöÄ Running DNGLab download script...")
        result = subprocess.run([str(script_path)], check=False)  # noqa: S603
        if result.returncode == 0:
            print("‚úÖ DNGLab downloaded successfully")
        else:
            print(f"‚ö†Ô∏è  DNGLab download failed with exit code {result.returncode}")
            print("‚ö†Ô∏è  DNG conversion may not work")
    else:
        print(f"‚ùå DNGLab download script not found: {script_path}")
        print("üìÅ Available files in tools directory:")
        tools_dir = Path("tools")
        if tools_dir.exists():
            for file in tools_dir.glob("*"):
                print(f"   - {file}")
        else:
            print("   ‚ùå tools directory does not exist")


def build_executable():
    """Build the standalone executable."""
    platform_name = get_platform_name()
    app_name = "eir"

    # Get version and metadata from pyproject.toml
    try:
        import tomllib

        with open("pyproject.toml", "rb") as f:
            config = tomllib.load(f)
        project = config.get("project", {})
        version = project.get("version", "dev")

        # Generate a build_constants.py file with embedded metadata
        build_constants = f'''"""Build-time constants generated by build script."""

VERSION = "{version}"
NAME = "{project.get("name", "eir")}"
LICENSE = "{project.get("license", {}).get("text", "MIT")}"
KEYWORDS = {project.get("keywords", ["unknown"])}
AUTHORS = {project.get("authors", [{"name": "ABK", "email": "unknown"}])}
MAINTAINERS = {project.get("maintainers", [{"name": "ABK", "email": "unknown"}])}
'''

        with open("src/eir/build_constants.py", "w") as f:
            f.write(build_constants)
        print(f"Generated build_constants.py with version {version}")

    except Exception as e:
        print(f"Error reading pyproject.toml: {e}")
        version = "dev"

    output_name = f"{app_name}-{version}-{platform_name}"

    # Check if required files exist and get absolute paths
    logging_yaml_path = Path("logging.yaml")
    pyproject_path = Path("pyproject.toml")

    if not logging_yaml_path.exists():
        print("Error: logging.yaml not found in project root")
        sys.exit(1)

    if not pyproject_path.exists():
        print("Error: pyproject.toml not found in project root")
        sys.exit(1)

    # Use absolute paths for PyInstaller
    logging_yaml_abs = str(logging_yaml_path.absolute())
    pyproject_abs = str(pyproject_path.absolute())

    # Download DNGLab for Linux builds
    download_dnglab_for_linux()

    # Check for DNGLab binary to bundle on Linux
    dnglab_binary = None
    if platform.system().lower() == "linux":
        machine = platform.machine().lower()
        dnglab_arch = "aarch64" if machine in ["aarch64", "arm64"] else "x86_64"
        dnglab_path = Path(f"tools/linux/dnglab_{dnglab_arch}")
        print(f"üîç Looking for DNGLab binary: {dnglab_path}")
        print(f"üîç Machine: {machine}, Arch: {dnglab_arch}")

        # Check if tools/linux directory exists
        tools_linux_dir = Path("tools/linux")
        if tools_linux_dir.exists():
            available_files = list(tools_linux_dir.glob("*"))
            print(f"üìÅ Available files in tools/linux: {available_files}")
        else:
            print("‚ùå tools/linux directory does not exist")

        if dnglab_path.exists():
            dnglab_binary = str(dnglab_path.absolute())
            file_size = dnglab_path.stat().st_size
            print(
                f"üì¶ Found DNGLab binary for bundling: {dnglab_binary} (size: {file_size} bytes)"
            )
        else:
            print(f"‚ùå DNGLab binary not found: {dnglab_path}")

    # PyInstaller command with Windows-specific optimizations
    cmd = [
        "pyinstaller",
        "--onefile",
        "--console",
        "--name",
        output_name,
        "--distpath",
        "dist",
        "--workpath",
        "build",
        "--specpath",
        "build",
        # Include data files
        "--add-data",
        f"{logging_yaml_abs}:.",
        "--add-data",
        f"{pyproject_abs}:.",
    ]

    # Add DNGLab binary for Linux builds
    if dnglab_binary:
        cmd.extend(["--add-binary", f"{dnglab_binary}:tools/linux/"])

    # Continue with hidden imports
    cmd.extend(
        [
            "--hidden-import",
            "eir.cli",
            "--hidden-import",
            "eir.processor",
            "--hidden-import",
            "eir.logger_manager",
            "--hidden-import",
            "eir.abk_common",
            "--hidden-import",
            "eir.constants",
            "--hidden-import",
            "eir.build_constants",
            "--hidden-import",
            "eir.clo",
            "--hidden-import",
            "colorama",
            "--hidden-import",
            "reactivex",
            "--hidden-import",
            "exiftool",
            "--hidden-import",
            "pydngconverter",
            "--hidden-import",
            "PyYAML",
            "--hidden-import",
            "yaml",
            # Entry point
            "src/eir/cli.py",
        ]
    )

    # Add Windows-specific options to avoid DLL loading issues
    if platform.system().lower() == "windows":
        cmd.extend(
            [
                "--noupx",  # Disable UPX compression which can cause DLL issues
                "--exclude-module",
                "tkinter",  # Exclude unnecessary modules
                "--exclude-module",
                "matplotlib",
                "--exclude-module",
                "PIL",
                "--runtime-tmpdir",
                ".",  # Use current directory for runtime temp
            ]
        )
    else:
        # Optimize for Unix systems
        cmd.extend(["--strip", "--optimize", "2"])

    print(f"Building {app_name} v{version} for {platform_name}...")
    print(f"Command: {' '.join(cmd)}")

    result = subprocess.run(cmd, check=False)  # noqa: S603
    if result.returncode != 0:
        print("Build failed!")
        sys.exit(1)

    # Handle Windows executable extension
    if platform.system().lower() == "windows":
        # PyInstaller automatically adds .exe on Windows
        exe_path = Path(f"dist/{output_name}.exe")
        if exe_path.exists():
            output_name += ".exe"

    print("Build completed successfully!")
    print(f"Executable location: dist/{output_name}")
    return output_name


def create_archive(executable_name):
    """Create a compressed archive of the binary."""
    version = executable_name.split("-")[1]  # Extract version from filename
    platform_name = get_platform_name()

    # Create archive name
    if platform.system().lower() == "windows":
        archive_name = f"eir-{version}-{platform_name}.zip"

        import zipfile

        with zipfile.ZipFile(f"dist/{archive_name}", "w", zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(f"dist/{executable_name}", executable_name)
            zipf.write("README.md", "README.md")
            zipf.write("LICENSE", "LICENSE")
            if Path("CHANGELOG.md").exists():
                zipf.write("CHANGELOG.md", "CHANGELOG.md")
    else:
        archive_name = f"eir-{version}-{platform_name}.tar.gz"

        subprocess.run(  # noqa: S603
            [
                "tar",
                "-czf",
                f"dist/{archive_name}",
                "-C",
                "dist",
                executable_name,
                "-C",
                "..",
                "README.md",
                "LICENSE",
            ]
            + (["-C", "..", "CHANGELOG.md"] if Path("CHANGELOG.md").exists() else []),
            check=True,
        )

    print(f"Archive created: dist/{archive_name}")
    return archive_name


def test_executable(executable_name):
    """Test the built executable."""
    exe_path = Path(f"dist/{executable_name}")

    if not exe_path.exists():
        print(f"Executable not found: {exe_path}")
        return False

    print(f"Testing executable: {exe_path}")

    # Skip testing on Windows due to DLL loading issues in CI environment
    # Windows binaries are tested in the GitHub Actions pipeline instead
    if platform.system().lower() == "windows":
        print("Skipping executable testing on Windows (tested in pipeline)")
        return True

    # Test --version on Unix systems
    try:
        result = subprocess.run(  # noqa: S603
            [str(exe_path.resolve()), "--version"],
            capture_output=True,
            text=True,
            timeout=30,
            check=False,
        )

        if result.returncode == 0:
            print(f"Version test passed: {result.stdout.strip()}")
        else:
            print(f"Version test failed: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("Version test timed out")
        return False
    except Exception as e:
        print(f"Version test error: {e}")
        return False

    # Test --help on Unix systems
    try:
        result = subprocess.run(  # noqa: S603
            [str(exe_path.resolve()), "--help"],
            capture_output=True,
            text=True,
            timeout=30,
            check=False,
        )

        if result.returncode == 0:
            print("Help test passed")
        else:
            print(f"Help test failed: {result.stderr}")
            return False
    except Exception as e:
        print(f"Help test error: {e}")
        return False

    return True


def main():
    """Main build process."""
    print("Starting Eir PyInstaller build process...")
    print(f"Platform: {get_platform_name()}")
    print(f"Python: {sys.version}")

    # Ensure we're in the project root
    if not Path("src/eir").exists():
        print("Error: Must run from project root directory")
        sys.exit(1)

    try:
        clean_build_dirs()
        executable_name = build_executable()

        # Test the executable
        if test_executable(executable_name):
            archive_name = create_archive(executable_name)
            print("Build process completed successfully!")
            print("Files created:")
            print(f"   - dist/{executable_name}")
            print(f"   - dist/{archive_name}")
        else:
            print("Build completed but tests failed")
            sys.exit(1)

    except subprocess.CalledProcessError as e:
        print(f"Build failed: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
