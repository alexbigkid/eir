name: Release Pipeline

on:
  workflow_run:
    workflows: ["ExifImageRenamer"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read

jobs:
  # Check if we should proceed with release
  check-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for release tags
        id: check
        run: |
          # Check if there are any patch/minor/major tags
          if git tag -l | grep -E '^(patch|minor|major)$' > /dev/null; then
            latest_tag=$(git tag -l | grep -E '^(patch|minor|major)$' | tail -1)
            echo "Found release tag: $latest_tag"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=$latest_tag" >> $GITHUB_OUTPUT
            
            # Verify tag points to the latest commit
            tag_commit=$(git rev-list -n 1 $latest_tag)
            main_commit=$(git rev-parse HEAD)
            
            if [ "$tag_commit" != "$main_commit" ]; then
              echo "‚ùå Error: Tag must point to the latest commit on main branch"
              echo "Tag commit: $tag_commit"
              echo "Main commit: $main_commit"
              exit 1
            fi
            echo "‚úÖ Confirmed: Tag points to latest main branch commit"
          else
            echo "No release tags found, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  # Version bump job
  version-bump:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_tag: ${{ steps.bump.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Get current version and bump
        id: bump
        run: |
          # Read current version from pyproject.toml
          current_version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"
          
          # Validate current version format
          if [[ ! "$current_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Invalid version format: $current_version"
            exit 1
          fi
          
          # Parse version components
          IFS='.' read -r major minor patch <<< "$current_version"
          
          # Determine new version based on tag
          tag_name="${{ needs.check-release.outputs.release_type }}"
          echo "Release type: $tag_name"
          
          case $tag_name in
            "major")
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            "minor")
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            "patch")
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
            *)
              echo "‚ùå Error: Invalid release tag: $tag_name"
              exit 1
              ;;
          esac
          
          new_version="${new_major}.${new_minor}.${new_patch}"
          version_tag="v${new_version}"
          
          echo "New version: $new_version"
          echo "Version tag: $version_tag"
          
          # Validate new version format
          if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Generated invalid version: $new_version"
            exit 1
          fi
          
          # Update pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$new_version\"/" pyproject.toml
          
          # Set outputs
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "version_tag=$version_tag" >> $GITHUB_OUTPUT

      - name: Commit version bump and create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "üîñ Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag ${{ steps.bump.outputs.version_tag }}
          git push origin HEAD:main
          git push origin ${{ steps.bump.outputs.version_tag }}

      - name: Delete trigger tag
        run: |
          # Delete the original trigger tag to keep repo clean
          git push --delete origin ${{ needs.check-release.outputs.release_type }}

  # Third job: Build binaries (depends on version-bump success)
  build:
    needs: [check-release, version-bump]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the updated version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Install PyInstaller
        run: uv pip install pyinstaller>=6.0

      - name: Build binary
        run: uv run python build.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.version-bump.outputs.new_version }}-${{ runner.os }}
          path: |
            dist/eir-*
            !dist/*.spec

  # Fourth job: Create GitHub release (depends on all builds)
  release:
    needs: [check-release, version-bump, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -name "eir-*" -type f -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version-bump.outputs.version_tag }}
          name: "Eir ${{ needs.version-bump.outputs.new_version }}"
          body: |
            ## üöÄ Eir ${{ needs.version-bump.outputs.new_version }}
            
            ### üì¶ Downloads
            - **macOS**: `eir-${{ needs.version-bump.outputs.new_version }}-macos-universal`
            - **Linux**: `eir-${{ needs.version-bump.outputs.new_version }}-linux-x86_64`  
            - **Windows**: `eir-${{ needs.version-bump.outputs.new_version }}-windows-amd64.exe`
            
            ### üîß Installation
            
            **macOS/Linux:**
            ```bash
            # Download the binary for your platform
            chmod +x eir-${{ needs.version-bump.outputs.new_version }}-<platform>
            sudo mv eir-${{ needs.version-bump.outputs.new_version }}-<platform> /usr/local/bin/eir
            ```
            
            **Windows:**
            ```cmd
            # Download eir-${{ needs.version-bump.outputs.new_version }}-windows-amd64.exe
            # Add to your PATH or run directly
            ```
            
            ### üìù Changes
            - Automated release build for version ${{ needs.version-bump.outputs.new_version }}
            - Multi-platform binaries (macOS, Linux, Windows)
            - See commit history for detailed changes
            
            ---
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
          files: ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}