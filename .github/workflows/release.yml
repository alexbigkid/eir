name: Release Pipeline

on:
  workflow_run:
    workflows: ["ExifImageRenamer"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read

jobs:
  # Combined release check and version bump job
  prepare-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Check for release tags
        id: check
        run: ./.github/scripts/check_release_tags.sh

      - name: Set up Python
        if: steps.check.outputs.should_release == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        if: steps.check.outputs.should_release == 'true'
        uses: astral-sh/setup-uv@v3

      - name: Get current version and bump
        if: steps.check.outputs.should_release == 'true'
        id: bump
        run: ./.github/scripts/version_bump.sh ${{ steps.check.outputs.release_type }}

      - name: Commit version bump and create release tag
        if: steps.check.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "ðŸ”– Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag v${{ steps.bump.outputs.new_version }}
          git push origin HEAD:main
          git push origin v${{ steps.bump.outputs.new_version }}

      - name: Delete trigger tag
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Delete the original trigger tag to keep repo clean
          git push --delete origin ${{ steps.check.outputs.release_type }}

  # Second job: Build binaries (depends on prepare-release success)
  build:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          - name: "Linux amd64"
            os: ubuntu-latest
            arch: x86_64
            arch_bin_ext: linux-x86_64
            runner: ubuntu-latest
          - name: "Linux arm64"
            os: ubuntu-24.04-arm
            arch: aarch64
            arch_bin_ext: linux-aarch64
            runner: ubuntu-24.04-arm
          - name: "Windows amd64"
            os: windows-latest
            arch: amd64
            arch_bin_ext: windows-x86_64.exe
            runner: windows-latest
          # Windows ARM64 temporarily disabled due to psutil build issues
          # - name: "Windows arm64"
          #   os: windows-11-arm
          #   arch: arm64
          #   arch_bin_ext: windows-arm64.exe
          #   runner: windows-11-arm
          - name: "macOS Universal"
            os: macos-latest
            arch: universal
            arch_bin_ext: macos-universal
            runner: macos-latest
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the updated version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Install PyInstaller
        run: uv pip install pyinstaller>=6.0

      - name: Build binary
        run: uv run python build.py

      - name: Test binary
        run: ./.github/scripts/test_binary.sh ${{ needs.prepare-release.outputs.new_version }} ${{ matrix.arch_bin_ext }}

      - name: Install APT tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Build packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: uv run python package_build.py

      - name: Build packages (Windows)
        if: matrix.os == 'windows-latest'
        run: uv run python package_build.py

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.prepare-release.outputs.new_version }}-${{ matrix.arch }}
          path: |
            dist/eir-*
            !dist/*.spec

      - name: Upload package artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.prepare-release.outputs.new_version }}-packages-linux
          path: |
            packages/*
            homebrew/*
            chocolatey/*

      - name: Upload package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.prepare-release.outputs.new_version }}-packages-windows
          path: |
            packages/*
            homebrew/*
            chocolatey/*

  # Third job: Create GitHub release and publish to package managers
  release-and-publish:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets and body
        run: ./.github/scripts/create_github_release.sh ${{ needs.prepare-release.outputs.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          name: "Eir ${{ needs.prepare-release.outputs.new_version }}"
          body_path: ./release_body.md
          files: ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Organize packages
        run: ./.github/scripts/organize_packages.sh

      - name: Publish to Homebrew
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN || secrets.GITHUB_TOKEN }}
        run: ./.github/scripts/publish_homebrew.sh ${{ needs.prepare-release.outputs.new_version }}

      - name: Publish to APT
        run: ./.github/scripts/publish_apt.sh ${{ needs.prepare-release.outputs.new_version }}

      - name: Publish to Chocolatey
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: ./.github/scripts/publish_chocolatey.sh ${{ needs.prepare-release.outputs.new_version }}
