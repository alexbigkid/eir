name: Release Pipeline

on:
  workflow_run:
    workflows: ["ExifImageRenamer"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read

jobs:
  # Check if we should proceed with release
  check-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for release tags
        id: check
        run: |
          # Check if there are any patch/minor/major tags
          if git tag -l | grep -E '^(patch|minor|major)$' > /dev/null; then
            latest_tag=$(git tag -l | grep -E '^(patch|minor|major)$' | tail -1)
            echo "Found release tag: $latest_tag"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "release_type=$latest_tag" >> $GITHUB_OUTPUT

            # Verify tag points to the latest commit
            tag_commit=$(git rev-list -n 1 $latest_tag)
            main_commit=$(git rev-parse HEAD)

            if [ "$tag_commit" != "$main_commit" ]; then
              echo "‚ùå Error: Tag must point to the latest commit on main branch"
              echo "Tag commit: $tag_commit"
              echo "Main commit: $main_commit"
              exit 1
            fi
            echo "‚úÖ Confirmed: Tag points to latest main branch commit"
          else
            echo "No release tags found, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  # Version bump job
  version-bump:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_tag: ${{ steps.bump.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Get current version and bump
        id: bump
        run: |
          # Read current version from pyproject.toml
          current_version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"

          # Validate current version format
          if [[ ! "$current_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Invalid version format: $current_version"
            exit 1
          fi

          # Parse version components
          IFS='.' read -r major minor patch <<< "$current_version"

          # Determine new version based on tag
          tag_name="${{ needs.check-release.outputs.release_type }}"
          echo "Release type: $tag_name"

          case $tag_name in
            "major")
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            "minor")
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            "patch")
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
            *)
              echo "‚ùå Error: Invalid release tag: $tag_name"
              exit 1
              ;;
          esac

          new_version="${new_major}.${new_minor}.${new_patch}"
          version_tag="v${new_version}"

          echo "New version: $new_version"
          echo "Version tag: $version_tag"

          # Validate new version format
          if [[ ! "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Generated invalid version: $new_version"
            exit 1
          fi

          # Update pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$new_version\"/" pyproject.toml

          # Set outputs
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "version_tag=$version_tag" >> $GITHUB_OUTPUT

      - name: Commit version bump and create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "üîñ Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag ${{ steps.bump.outputs.version_tag }}
          git push origin HEAD:main
          git push origin ${{ steps.bump.outputs.version_tag }}

      - name: Delete trigger tag
        run: |
          # Delete the original trigger tag to keep repo clean
          git push --delete origin ${{ needs.check-release.outputs.release_type }}

  # Third job: Build binaries (depends on version-bump success)
  build:
    needs: [check-release, version-bump]
    strategy:
      matrix:
        include:
          - name: "Linux amd64"
            os: ubuntu-latest
            arch: x86_64
            runner: ubuntu-latest
          - name: "Linux arm64"
            os: ubuntu-24.04-arm
            arch: aarch64
            runner: ubuntu-24.04-arm
          - name: "Windows amd64"
            os: windows-latest
            arch: amd64
            runner: windows-latest
          # Windows ARM64 temporarily disabled due to psutil build issues
          # - name: "Windows arm64"
          #   os: windows-11-arm
          #   arch: arm64
          #   runner: windows-11-arm
          - name: "macOS Universal"
            os: macos-latest
            arch: universal
            runner: macos-latest
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main  # Get the updated version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Install PyInstaller
        run: uv pip install pyinstaller>=6.0

      - name: Build binary
        run: uv run python build.py

      - name: Test binary (Windows x86_64)
        if: matrix.os == 'windows-latest'
        run: |
          .\dist\eir-${{ needs.version-bump.outputs.new_version }}-windows-x86_64.exe --version
          .\dist\eir-${{ needs.version-bump.outputs.new_version }}-windows-x86_64.exe --help

      - name: Test binary (Windows ARM64)
        if: matrix.os == 'windows-11-arm'
        run: |
          .\dist\eir-${{ needs.version-bump.outputs.new_version }}-windows-arm64.exe --version
          .\dist\eir-${{ needs.version-bump.outputs.new_version }}-windows-arm64.exe --help

      - name: Test binary (macOS Universal)
        if: matrix.os == 'macos-latest'
        run: |
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-macos-universal --version
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-macos-universal --help

      - name: Test binary (Linux x86_64)
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-linux-x86_64 --version
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-linux-x86_64 --help

      - name: Test binary (Linux ARM64)
        if: matrix.os == 'ubuntu-24.04-arm'
        run: |
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-linux-aarch64 --version
          ./dist/eir-${{ needs.version-bump.outputs.new_version }}-linux-aarch64 --help

      - name: Install APT tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Build packages
        if: matrix.os == 'ubuntu-latest'
        run: uv run python package_build.py

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.version-bump.outputs.new_version }}-${{ matrix.arch }}
          path: |
            dist/eir-*
            !dist/*.spec

      - name: Upload package artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: eir-${{ needs.version-bump.outputs.new_version }}-packages
          path: |
            packages/*
            homebrew/*
            chocolatey/*

  # Fourth job: Create GitHub release (depends on all builds)
  release:
    needs: [check-release, version-bump, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -name "eir-*" -type f -exec cp {} ./release-assets/ \;
          # Copy package files if they exist
          if [ -d "./artifacts/eir-${{ needs.version-bump.outputs.new_version }}-packages" ]; then
            cp -r ./artifacts/eir-${{ needs.version-bump.outputs.new_version }}-packages/* ./release-assets/ 2>/dev/null || true
          fi
          ls -la ./release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version-bump.outputs.version_tag }}
          name: "Eir ${{ needs.version-bump.outputs.new_version }}"
          body: |
            ## üöÄ Eir ${{ needs.version-bump.outputs.new_version }}

            ### üì¶ Downloads

            **macOS (Universal - Intel + Apple Silicon):**
            - `eir-${{ needs.version-bump.outputs.new_version }}-macos-universal`

            **Linux:**
            - **x86_64** (Intel/AMD): `eir-${{ needs.version-bump.outputs.new_version }}-linux-x86_64`
            - **ARM64** (ARM/Graviton): `eir-${{ needs.version-bump.outputs.new_version }}-linux-aarch64`

            **Windows:**
            - **x86_64** (Intel/AMD): `eir-${{ needs.version-bump.outputs.new_version }}-windows-x86_64.exe`
            - **ARM64** (Surface Pro X): `eir-${{ needs.version-bump.outputs.new_version }}-windows-arm64.exe`

            ### üèóÔ∏è Architecture Support
            - **‚úÖ Intel/AMD x86_64**: Full support (Linux, Windows, macOS)
            - **‚úÖ ARM64**: Full support (Linux, Windows, macOS)
            - **‚úÖ Apple Silicon**: Native support via macOS Universal binary
            - **‚úÖ AWS Graviton**: Native ARM64 Linux support
            - **‚úÖ Raspberry Pi 4/5**: Native ARM64 Linux support
            - **‚ùå 32-bit systems**: Not supported

            ### üîß Installation

            **macOS (Homebrew):**
            ```bash
            # Add our tap and install
            brew tap alexbigkid/eir https://github.com/alexbigkid/eir
            brew install eir
            ```

            **Ubuntu/Debian (APT):**
            ```bash
            # Add Eir APT repository (supports both amd64 and arm64)
            echo 'deb [trusted=yes] https://alexbigkid.github.io/eir/apt-repo stable main' | sudo tee /etc/apt/sources.list.d/eir.list
            sudo apt update
            sudo apt install eir
            ```

            **Manual .deb installation:**
            ```bash
            wget https://github.com/alexbigkid/eir/releases/download/v${{ needs.version-bump.outputs.new_version }}/eir_${{ needs.version-bump.outputs.new_version }}_amd64.deb
            sudo dpkg -i eir_${{ needs.version-bump.outputs.new_version }}_amd64.deb
            ```

            **Windows (Chocolatey):**
            ```cmd
            # Install via Chocolatey (coming soon)
            choco install eir
            ```

            **Manual Installation:**

            *macOS/Linux:*
            ```bash
            # Download the binary for your platform
            chmod +x eir-${{ needs.version-bump.outputs.new_version }}-<platform>
            sudo mv eir-${{ needs.version-bump.outputs.new_version }}-<platform> /usr/local/bin/eir
            ```

            *Windows:*
            ```cmd
            # Download eir-${{ needs.version-bump.outputs.new_version }}-windows-amd64.exe
            # Add to your PATH or run directly
            ```

            **Unsupported Architectures (ARM64 Linux, 32-bit systems):**
            ```bash
            # Install from source using pip
            pip install git+https://github.com/alexbigkid/eir.git@v${{ needs.version-bump.outputs.new_version }}
            ```

            ### üìù Changes
            - Automated release build for version ${{ needs.version-bump.outputs.new_version }}
            - Multi-platform binaries (macOS, Linux, Windows)
            - Package manager support (Homebrew, APT, Chocolatey)
            - See commit history for detailed changes

            ---
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
          files: ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Fifth job: Automated package publishing (depends on release)
  publish-packages:
    needs: [check-release, version-bump, build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: eir-${{ needs.version-bump.outputs.new_version }}-packages
          path: ./packages

      - name: Set up Git for Homebrew
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Clone the homebrew-eir repository with authentication
          git clone https://x-access-token:$GITHUB_TOKEN@github.com/alexbigkid/homebrew-eir.git ../homebrew-eir
          
          # Copy the updated formula
          mkdir -p ../homebrew-eir/Formula
          cp homebrew/eir.rb ../homebrew-eir/Formula/eir.rb
          
          # Commit and push changes
          cd ../homebrew-eir
          git add Formula/eir.rb
          if git diff --staged --quiet; then
            echo "No changes to Homebrew formula"
          else
            git commit -m "Update eir formula to v${{ needs.version-bump.outputs.new_version }}"
            git push origin main
            echo "‚úÖ Homebrew formula updated"
          fi

      - name: Setup GitHub Pages for APT
        run: |
          # Create docs directory for GitHub Pages
          mkdir -p docs/apt-repo
          if [ -d "packages/apt-repo" ]; then
            cp -r packages/apt-repo/* docs/apt-repo/
          fi
          
          # Create index page for APT repository
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Eir APT Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .code { background: #f5f5f5; padding: 10px; border-radius: 5px; }
              </style>
          </head>
          <body>
              <h1>Eir APT Repository</h1>
              <p>EXIF-based image renamer and RAW format converter</p>
              
              <h2>Installation</h2>
              <div class="code">
                  <pre>echo 'deb [trusted=yes] https://alexbigkid.github.io/eir/apt-repo stable main' | sudo tee /etc/apt/sources.list.d/eir.list
          sudo apt update
          sudo apt install eir</pre>
              </div>
              
              <h2>Supported Architectures</h2>
              <ul>
                  <li>amd64 (Intel/AMD 64-bit)</li>
                  <li>arm64 (ARM 64-bit)</li>
              </ul>
              
              <p><a href="https://github.com/alexbigkid/eir">View source on GitHub</a></p>
          </body>
          </html>
          EOF
          
          # Commit APT repository changes
          git add docs/
          if git diff --staged --quiet; then
            echo "No changes to APT repository"
          else
            git commit -m "Update APT repository for v${{ needs.version-bump.outputs.new_version }}"
            git push origin main
            echo "‚úÖ APT repository updated"
          fi

      - name: Publish to Chocolatey
        if: ${{ secrets.CHOCOLATEY_API_KEY != '' }}
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          # Install Chocolatey CLI on Ubuntu
          sudo apt-get update
          sudo apt-get install -y curl
          
          # Download and install choco for Linux
          mkdir -p ~/.local/bin
          curl -s https://api.github.com/repos/chocolatey/choco/releases/latest | \
            grep "browser_download_url.*linux-x64.tar.gz" | \
            cut -d '"' -f 4 | \
            xargs curl -L -o choco.tar.gz
          tar -xzf choco.tar.gz -C ~/.local/bin
          chmod +x ~/.local/bin/choco
          
          # Find and upload Chocolatey package
          NUPKG_FILE=$(find packages/ -name "*.nupkg" | head -1)
          if [ -n "$NUPKG_FILE" ]; then
            echo "Uploading $NUPKG_FILE to Chocolatey..."
            ~/.local/bin/choco push "$NUPKG_FILE" \
              --source https://push.chocolatey.org/ \
              --api-key "$CHOCOLATEY_API_KEY"
            echo "‚úÖ Chocolatey package uploaded"
          else
            echo "‚ö†Ô∏è No Chocolatey package found to upload"
          fi
